 E[] arr;
    int size;

    public MyArrayList() {
        this(10);
    }

    public MyArrayList(int initCap) {
        arr = (E[]) new Object[initCap];
    }

    public void addFirst(E item) {
        addAtIndex(0, item);
    }

    public void addLast(E item) {
        addAtIndex(size, item);
    }

    public void addAtIndex(int index, E item) {
        E[] s = (E[]) new Object[3];
        if (index < 0 || index > size) {
            throw new IndexOutOfBoundsException();
        }

        if (size == arr.length) {
            arr = Arrays.copyOf(arr, 2 * size);
        }

        if (index != size) {
            System.arraycopy(arr, index, arr, index + 1, size - index);
        }

        arr[index] = item;
        ++size;
    }

    public E removeFirst() {
        return removeFromIndex(0);
    }

    public E removeLast() {
        return removeFromIndex(size - 1);
    }

    public E removeFromIndex(int index) {
        if (index < 0 || index >= size) {
            throw new IndexOutOfBoundsException();
        }

        E ret = arr[index];

        if (index != size - 1) {
            System.arraycopy(arr, index + 1, arr, index, size - index);
        }

        arr[--size] = null;

        return ret;
    }

    public E get(int index) {
        if (index < 0 || index >= size) {
            throw new IndexOutOfBoundsException();
        }

        return arr[index];
    }

    public void set(int index, E item) {
        if (index < 0 || index >= size) {
            throw new IndexOutOfBoundsException();
        }

        arr[index] = item;
    }

    public boolean contains(E item) {
        for (int i = 0; i < size; ++i) {
            if (item.equals(arr[i])) {
                return true;
            }
        }
        return false;
    }

    @Override
    public String toString() {
        String s = "[ ";
        for (int i = 0; i < size; i++) {
            s += arr[i] + " ";
        }
        s += "]";
        return s;
    }
